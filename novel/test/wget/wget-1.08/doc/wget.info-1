This is wget.info, produced by makeinfo version 4.0b from ./wget.texi.

INFO-DIR-SECTION Net Utilities
INFO-DIR-SECTION World Wide Web
START-INFO-DIR-ENTRY
* Wget: (wget).         The non-interactive network downloader.
END-INFO-DIR-ENTRY

   This file documents the the GNU Wget utility for downloading network
data.

   Copyright (C) 1996, 1997, 1998, 2000, 2001 Free Software Foundation,
Inc.

   Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

   Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.1 or
any later version published by the Free Software Foundation; with the
Invariant Sections being "GNU General Public License" and "GNU Free
Documentation License", with no Front-Cover Texts, and with no
Back-Cover Texts.  A copy of the license is included in the section
entitled "GNU Free Documentation License".


File: wget.info,  Node: Top,  Next: Overview,  Prev: (dir),  Up: (dir)

Wget 1.8
********

   This manual documents version 1.8 of GNU Wget, the freely available
utility for network download.

   Copyright (C) 1996, 1997, 1998, 2000, 2001 Free Software Foundation,
Inc.

* Menu:

* Overview::            Features of Wget.
* Invoking::            Wget command-line arguments.
* Recursive Retrieval:: Description of recursive retrieval.
* Following Links::     The available methods of chasing links.
* Time-Stamping::       Mirroring according to time-stamps.
* Startup File::        Wget's initialization file.
* Examples::            Examples of usage.
* Various::             The stuff that doesn't fit anywhere else.
* Appendices::          Some useful references.
* Copying::             You may give out copies of Wget and of this manual.
* Concept Index::       Topics covered by this manual.


File: wget.info,  Node: Overview,  Next: Invoking,  Prev: Top,  Up: Top

Overview
********

   GNU Wget is a free utility for non-interactive download of files from
the Web.  It supports HTTP, HTTPS, and FTP protocols, as well as
retrieval through HTTP proxies.

   This chapter is a partial overview of Wget's features.

   * Wget is non-interactive, meaning that it can work in the
     background, while the user is not logged on.  This allows you to
     start a retrieval and disconnect from the system, letting Wget
     finish the work.  By contrast, most of the Web browsers require
     constant user's presence, which can be a great hindrance when
     transferring a lot of data.


   * Wget can follow links in HTML pages and create local versions of
     remote web sites, fully recreating the directory structure of the
     original site.  This is sometimes referred to as "recursive
     downloading."  While doing that, Wget respects the Robot Exclusion
     Standard (`/robots.txt').  Wget can be instructed to convert the
     links in downloaded HTML files to the local files for offline
     viewing.


   * File name wildcard matching and recursive mirroring of directories
     are available when retrieving via FTP.  Wget can read the
     time-stamp information given by both HTTP and FTP servers, and
     store it locally.  Thus Wget can see if the remote file has
     changed since last retrieval, and automatically retrieve the new
     version if it has.  This makes Wget suitable for mirroring of FTP
     sites, as well as home pages.


   * Wget has been designed for robustness over slow or unstable network
     connections; if a download fails due to a network problem, it will
     keep retrying until the whole file has been retrieved.  If the
     server supports regetting, it will instruct the server to continue
     the download from where it left off.


   * Wget supports proxy servers, which can lighten the network load,
     speed up retrieval and provide access behind firewalls.  However,
     if you are behind a firewall that requires that you use a socks
     style gateway, you can get the socks library and build Wget with
     support for socks.  Wget also supports the passive FTP downloading
     as an option.


   * Builtin features offer mechanisms to tune which links you wish to
     follow (*note Following Links::).


   * The retrieval is conveniently traced with printing dots, each dot
     representing a fixed amount of data received (1KB by default).
     These representations can be customized to your preferences.


   * Most of the features are fully configurable, either through
     command line options, or via the initialization file `.wgetrc'
     (*note Startup File::).  Wget allows you to define "global"
     startup files (`/usr/local/etc/wgetrc' by default) for site
     settings.


   * Finally, GNU Wget is free software.  This means that everyone may
     use it, redistribute it and/or modify it under the terms of the
     GNU General Public License, as published by the Free Software
     Foundation (*note Copying::).


File: wget.info,  Node: Invoking,  Next: Recursive Retrieval,  Prev: Overview,  Up: Top

Invoking
********

   By default, Wget is very simple to invoke.  The basic syntax is:

     wget [OPTION]... [URL]...

   Wget will simply download all the URLs specified on the command
line.  URL is a "Uniform Resource Locator", as defined below.

   However, you may wish to change some of the default parameters of
Wget.  You can do it two ways: permanently, adding the appropriate
command to `.wgetrc' (*note Startup File::), or specifying it on the
command line.

* Menu:

* URL Format::
* Option Syntax::
* Basic Startup Options::
* Logging and Input File Options::
* Download Options::
* Directory Options::
* HTTP Options::
* FTP Options::
* Recursive Retrieval Options::
* Recursive Accept/Reject Options::


File: wget.info,  Node: URL Format,  Next: Option Syntax,  Prev: Invoking,  Up: Invoking

URL Format
==========

   "URL" is an acronym for Uniform Resource Locator.  A uniform
resource locator is a compact string representation for a resource
available via the Internet.  Wget recognizes the URL syntax as per
RFC1738.  This is the most widely used form (square brackets denote
optional parts):

     http://host[:port]/directory/file
     ftp://host[:port]/directory/file

   You can also encode your username and password within a URL:

     ftp://user:password@host/path
     http://user:password@host/path

   Either USER or PASSWORD, or both, may be left out.  If you leave out
either the HTTP username or password, no authentication will be sent.
If you leave out the FTP username, `anonymous' will be used.  If you
leave out the FTP password, your email address will be supplied as a
default password.(1)

   You can encode unsafe characters in a URL as `%xy', `xy' being the
hexadecimal representation of the character's ASCII value.  Some common
unsafe characters include `%' (quoted as `%25'), `:' (quoted as `%3A'),
and `@' (quoted as `%40').  Refer to RFC1738 for a comprehensive list
of unsafe characters.

   Wget also supports the `type' feature for FTP URLs.  By default, FTP
documents are retrieved in the binary mode (type `i'), which means that
they are downloaded unchanged.  Another useful mode is the `a'
("ASCII") mode, which converts the line delimiters between the
different operating systems, and is thus useful for text files.  Here
is an example:

     ftp://host/directory/file;type=a

   Two alternative variants of URL specification are also supported,
because of historical (hysterical?) reasons and their widespreaded use.

   FTP-only syntax (supported by `NcFTP'):
     host:/dir/file

   HTTP-only syntax (introduced by `Netscape'):
     host[:port]/dir/file

   These two alternative forms are deprecated, and may cease being
supported in the future.

   If you do not understand the difference between these notations, or
do not know which one to use, just use the plain ordinary format you use
with your favorite browser, like `Lynx' or `Netscape'.

   ---------- Footnotes ----------

   (1) If you have a `.netrc' file in your home directory, password
will also be searched for there.


File: wget.info,  Node: Option Syntax,  Next: Basic Startup Options,  Prev: URL Format,  Up: Invoking

Option Syntax
=============

   Since Wget uses GNU getopts to process its arguments, every option
has a short form and a long form.  Long options are more convenient to
remember, but take time to type.  You may freely mix different option
styles, or specify options after the command-line arguments.  Thus you
may write:

     wget -r --tries=10 http://fly.srk.fer.hr/ -o log

   The space between the option accepting an argument and the argument
may be omitted.  Instead `-o log' you can write `-olog'.

   You may put several options that do not require arguments together,
like:

     wget -drc URL

   This is a complete equivalent of:

     wget -d -r -c URL

   Since the options can be specified after the arguments, you may
terminate them with `--'.  So the following will try to download URL
`-x', reporting failure to `log':

     wget -o log -- -x

   The options that accept comma-separated lists all respect the
convention that specifying an empty list clears its value.  This can be
useful to clear the `.wgetrc' settings.  For instance, if your `.wgetrc'
sets `exclude_directories' to `/cgi-bin', the following example will
first reset it, and then set it to exclude `/~nobody' and `/~somebody'.
You can also clear the lists in `.wgetrc' (*note Wgetrc Syntax::).

     wget -X '' -X /~nobody,/~somebody


File: wget.info,  Node: Basic Startup Options,  Next: Logging and Input File Options,  Prev: Option Syntax,  Up: Invoking

Basic Startup Options
=====================

`-V'
`--version'
     Display the version of Wget.

`-h'
`--help'
     Print a help message describing all of Wget's command-line options.

`-b'
`--background'
     Go to background immediately after startup.  If no output file is
     specified via the `-o', output is redirected to `wget-log'.

`-e COMMAND'
`--execute COMMAND'
     Execute COMMAND as if it were a part of `.wgetrc' (*note Startup
     File::).  A command thus invoked will be executed _after_ the
     commands in `.wgetrc', thus taking precedence over them.


File: wget.info,  Node: Logging and Input File Options,  Next: Download Options,  Prev: Basic Startup Options,  Up: Invoking

Logging and Input File Options
==============================

`-o LOGFILE'
`--output-file=LOGFILE'
     Log all messages to LOGFILE.  The messages are normally reported
     to standard error.

`-a LOGFILE'
`--append-output=LOGFILE'
     Append to LOGFILE.  This is the same as `-o', only it appends to
     LOGFILE instead of overwriting the old log file.  If LOGFILE does
     not exist, a new file is created.

`-d'
`--debug'
     Turn on debug output, meaning various information important to the
     developers of Wget if it does not work properly.  Your system
     administrator may have chosen to compile Wget without debug
     support, in which case `-d' will not work.  Please note that
     compiling with debug support is always safe--Wget compiled with
     the debug support will _not_ print any debug info unless requested
     with `-d'.  *Note Reporting Bugs::, for more information on how to
     use `-d' for sending bug reports.

`-q'
`--quiet'
     Turn off Wget's output.

`-v'
`--verbose'
     Turn on verbose output, with all the available data.  The default
     output is verbose.

`-nv'
`--non-verbose'
     Non-verbose output--turn off verbose without being completely quiet
     (use `-q' for that), which means that error messages and basic
     information still get printed.

`-i FILE'
`--input-file=FILE'
     Read URLs from FILE, in which case no URLs need to be on the
     command line.  If there are URLs both on the command line and in
     an input file, those on the command lines will be the first ones to
     be retrieved.  The FILE need not be an HTML document (but no harm
     if it is)--it is enough if the URLs are just listed sequentially.

     However, if you specify `--force-html', the document will be
     regarded as `html'.  In that case you may have problems with
     relative links, which you can solve either by adding `<base
     href="URL">' to the documents or by specifying `--base=URL' on the
     command line.

`-F'
`--force-html'
     When input is read from a file, force it to be treated as an HTML
     file.  This enables you to retrieve relative links from existing
     HTML files on your local disk, by adding `<base href="URL">' to
     HTML, or using the `--base' command-line option.

`-B URL'
`--base=URL'
     When used in conjunction with `-F', prepends URL to relative links
     in the file specified by `-i'.


File: wget.info,  Node: Download Options,  Next: Directory Options,  Prev: Logging and Input File Options,  Up: Invoking

Download Options
================

`--bind-address=ADDRESS'
     When making client TCP/IP connections, `bind()' to ADDRESS on the
     local machine.  ADDRESS may be specified as a hostname or IP
     address.  This option can be useful if your machine is bound to
     multiple IPs.

`-t NUMBER'
`--tries=NUMBER'
     Set number of retries to NUMBER.  Specify 0 or `inf' for infinite
     retrying.

`-O FILE'
`--output-document=FILE'
     The documents will not be written to the appropriate files, but
     all will be concatenated together and written to FILE.  If FILE
     already exists, it will be overwritten.  If the FILE is `-', the
     documents will be written to standard output.  Including this
     option automatically sets the number of tries to 1.

`-nc'
`--no-clobber'
     If a file is downloaded more than once in the same directory,
     Wget's behavior depends on a few options, including `-nc'.  In
     certain cases, the local file will be "clobbered", or overwritten,
     upon repeated download.  In other cases it will be preserved.

     When running Wget without `-N', `-nc', or `-r', downloading the
     same file in the same directory will result in the original copy
     of FILE being preserved and the second copy being named `FILE.1'.
     If that file is downloaded yet again, the third copy will be named
     `FILE.2', and so on.  When `-nc' is specified, this behavior is
     suppressed, and Wget will refuse to download newer copies of
     `FILE'.  Therefore, "`no-clobber'" is actually a misnomer in this
     mode--it's not clobbering that's prevented (as the numeric
     suffixes were already preventing clobbering), but rather the
     multiple version saving that's prevented.

     When running Wget with `-r', but without `-N' or `-nc',
     re-downloading a file will result in the new copy simply
     overwriting the old.  Adding `-nc' will prevent this behavior,
     instead causing the original version to be preserved and any newer
     copies on the server to be ignored.

     When running Wget with `-N', with or without `-r', the decision as
     to whether or not to download a newer copy of a file depends on
     the local and remote timestamp and size of the file (*note
     Time-Stamping::).  `-nc' may not be specified at the same time as
     `-N'.

     Note that when `-nc' is specified, files with the suffixes `.html'
     or (yuck) `.htm' will be loaded from the local disk and parsed as
     if they had been retrieved from the Web.

`-c'
`--continue'
     Continue getting a partially-downloaded file.  This is useful when
     you want to finish up a download started by a previous instance of
     Wget, or by another program.  For instance:

          wget -c ftp://sunsite.doc.ic.ac.uk/ls-lR.Z

     If there is a file named `ls-lR.Z' in the current directory, Wget
     will assume that it is the first portion of the remote file, and
     will ask the server to continue the retrieval from an offset equal
     to the length of the local file.

     Note that you don't need to specify this option if you just want
     the current invocation of Wget to retry downloading a file should
     the connection be lost midway through.  This is the default
     behavior.  `-c' only affects resumption of downloads started
     _prior_ to this invocation of Wget, and whose local files are
     still sitting around.

     Without `-c', the previous example would just download the remote
     file to `ls-lR.Z.1', leaving the truncated `ls-lR.Z' file alone.

     Beginning with Wget 1.7, if you use `-c' on a non-empty file, and
     it turns out that the server does not support continued
     downloading, Wget will refuse to start the download from scratch,
     which would effectively ruin existing contents.  If you really
     want the download to start from scratch, remove the file.

     Also beginning with Wget 1.7, if you use `-c' on a file which is of
     equal size as the one on the server, Wget will refuse to download
     the file and print an explanatory message.  The same happens when
     the file is smaller on the server than locally (presumably because
     it was changed on the server since your last download
     attempt)--because "continuing" is not meaningful, no download
     occurs.

     On the other side of the coin, while using `-c', any file that's
     bigger on the server than locally will be considered an incomplete
     download and only `(length(remote) - length(local))' bytes will be
     downloaded and tacked onto the end of the local file.  This
     behavior can be desirable in certain cases--for instance, you can
     use `wget -c' to download just the new portion that's been
     appended to a data collection or log file.

     However, if the file is bigger on the server because it's been
     _changed_, as opposed to just _appended_ to, you'll end up with a
     garbled file.  Wget has no way of verifying that the local file is
     really a valid prefix of the remote file.  You need to be
     especially careful of this when using `-c' in conjunction with
     `-r', since every file will be considered as an "incomplete
     download" candidate.

     Another instance where you'll get a garbled file if you try to use
     `-c' is if you have a lame HTTP proxy that inserts a "transfer
     interrupted" string into the local file.  In the future a
     "rollback" option may be added to deal with this case.

     Note that `-c' only works with FTP servers and with HTTP servers
     that support the `Range' header.

`--progress=TYPE'
     Select the type of the progress indicator you wish to use.  Legal
     indicators are "dot" and "bar".

     The "dot" indicator is used by default.  It traces the retrieval by
     printing dots on the screen, each dot representing a fixed amount
     of downloaded data.

     When using the dotted retrieval, you may also set the "style" by
     specifying the type as `dot:STYLE'.  Different styles assign
     different meaning to one dot.  With the `default' style each dot
     represents 1K, there are ten dots in a cluster and 50 dots in a
     line.  The `binary' style has a more "computer"-like
     orientation--8K dots, 16-dots clusters and 48 dots per line (which
     makes for 384K lines).  The `mega' style is suitable for
     downloading very large files--each dot represents 64K retrieved,
     there are eight dots in a cluster, and 48 dots on each line (so
     each line contains 3M).

     Specifying `--progress=bar' will draw a nice ASCII progress bar
     graphics (a.k.a "thermometer" display) to indicate retrieval.  If
     the output is not a TTY, this option will be ignored, and Wget
     will revert to the dot indicator.  If you want to force the bar
     indicator, use `--progress=bar:force'.

`-N'
`--timestamping'
     Turn on time-stamping.  *Note Time-Stamping::, for details.

`-S'
`--server-response'
     Print the headers sent by HTTP servers and responses sent by FTP
     servers.

`--spider'
     When invoked with this option, Wget will behave as a Web "spider",
     which means that it will not download the pages, just check that
     they are there.  You can use it to check your bookmarks, e.g. with:

          wget --spider --force-html -i bookmarks.html

     This feature needs much more work for Wget to get close to the
     functionality of real WWW spiders.

`-T seconds'
`--timeout=SECONDS'
     Set the read timeout to SECONDS seconds.  Whenever a network read
     is issued, the file descriptor is checked for a timeout, which
     could otherwise leave a pending connection (uninterrupted read).
     The default timeout is 900 seconds (fifteen minutes).  Setting
     timeout to 0 will disable checking for timeouts.

     Please do not lower the default timeout value with this option
     unless you know what you are doing.

`-w SECONDS'
`--wait=SECONDS'
     Wait the specified number of seconds between the retrievals.  Use
     of this option is recommended, as it lightens the server load by
     making the requests less frequent.  Instead of in seconds, the
     time can be specified in minutes using the `m' suffix, in hours
     using `h' suffix, or in days using `d' suffix.

     Specifying a large value for this option is useful if the network
     or the destination host is down, so that Wget can wait long enough
     to reasonably expect the network error to be fixed before the
     retry.

`--waitretry=SECONDS'
     If you don't want Wget to wait between _every_ retrieval, but only
     between retries of failed downloads, you can use this option.
     Wget will use "linear backoff", waiting 1 second after the first
     failure on a given file, then waiting 2 seconds after the second
     failure on that file, up to the maximum number of SECONDS you
     specify.  Therefore, a value of 10 will actually make Wget wait up
     to (1 + 2 + ... + 10) = 55 seconds per file.

     Note that this option is turned on by default in the global
     `wgetrc' file.

`--random-wait'
     Some web sites may perform log analysis to identify retrieval
     programs such as Wget by looking for statistically significant
     similarities in the time between requests. This option causes the
     time between requests to vary between 0 and 2 * WAIT seconds,
     where WAIT was specified using the `-w' or `--wait' options, in
     order to mask Wget's presence from such analysis.

     A recent article in a publication devoted to development on a
     popular consumer platform provided code to perform this analysis
     on the fly.  Its author suggested blocking at the class C address
     level to ensure automated retrieval programs were blocked despite
     changing DHCP-supplied addresses.

     The `--random-wait' option was inspired by this ill-advised
     recommendation to block many unrelated users from a web site due
     to the actions of one.

`-Y on/off'
`--proxy=on/off'
     Turn proxy support on or off.  The proxy is on by default if the
     appropriate environmental variable is defined.

`-Q QUOTA'
`--quota=QUOTA'
     Specify download quota for automatic retrievals.  The value can be
     specified in bytes (default), kilobytes (with `k' suffix), or
     megabytes (with `m' suffix).

     Note that quota will never affect downloading a single file.  So
     if you specify `wget -Q10k ftp://wuarchive.wustl.edu/ls-lR.gz',
     all of the `ls-lR.gz' will be downloaded.  The same goes even when
     several URLs are specified on the command-line.  However, quota is
     respected when retrieving either recursively, or from an input
     file.  Thus you may safely type `wget -Q2m -i sites'--download
     will be aborted when the quota is exceeded.

     Setting quota to 0 or to `inf' unlimits the download quota.


File: wget.info,  Node: Directory Options,  Next: HTTP Options,  Prev: Download Options,  Up: Invoking

Directory Options
=================

`-nd'
`--no-directories'
     Do not create a hierarchy of directories when retrieving
     recursively.  With this option turned on, all files will get saved
     to the current directory, without clobbering (if a name shows up
     more than once, the filenames will get extensions `.n').

`-x'
`--force-directories'
     The opposite of `-nd'--create a hierarchy of directories, even if
     one would not have been created otherwise.  E.g. `wget -x
     http://fly.srk.fer.hr/robots.txt' will save the downloaded file to
     `fly.srk.fer.hr/robots.txt'.

`-nH'
`--no-host-directories'
     Disable generation of host-prefixed directories.  By default,
     invoking Wget with `-r http://fly.srk.fer.hr/' will create a
     structure of directories beginning with `fly.srk.fer.hr/'.  This
     option disables such behavior.

`--cut-dirs=NUMBER'
     Ignore NUMBER directory components.  This is useful for getting a
     fine-grained control over the directory where recursive retrieval
     will be saved.

     Take, for example, the directory at
     `ftp://ftp.xemacs.org/pub/xemacs/'.  If you retrieve it with `-r',
     it will be saved locally under `ftp.xemacs.org/pub/xemacs/'.
     While the `-nH' option can remove the `ftp.xemacs.org/' part, you
     are still stuck with `pub/xemacs'.  This is where `--cut-dirs'
     comes in handy; it makes Wget not "see" NUMBER remote directory
     components.  Here are several examples of how `--cut-dirs' option
     works.

          No options        -> ftp.xemacs.org/pub/xemacs/
          -nH               -> pub/xemacs/
          -nH --cut-dirs=1  -> xemacs/
          -nH --cut-dirs=2  -> .
          
          --cut-dirs=1      -> ftp.xemacs.org/xemacs/
          ...

     If you just want to get rid of the directory structure, this
     option is similar to a combination of `-nd' and `-P'.  However,
     unlike `-nd', `--cut-dirs' does not lose with subdirectories--for
     instance, with `-nH --cut-dirs=1', a `beta/' subdirectory will be
     placed to `xemacs/beta', as one would expect.

`-P PREFIX'
`--directory-prefix=PREFIX'
     Set directory prefix to PREFIX.  The "directory prefix" is the
     directory where all other files and subdirectories will be saved
     to, i.e. the top of the retrieval tree.  The default is `.' (the
     current directory).


File: wget.info,  Node: HTTP Options,  Next: FTP Options,  Prev: Directory Options,  Up: Invoking

HTTP Options
============

`-E'
`--html-extension'
     If a file of type `text/html' is downloaded and the URL does not
     end with the regexp `\.[Hh][Tt][Mm][Ll]?', this option will cause
     the suffix `.html' to be appended to the local filename.  This is
     useful, for instance, when you're mirroring a remote site that uses
     `.asp' pages, but you want the mirrored pages to be viewable on
     your stock Apache server.  Another good use for this is when you're
     downloading the output of CGIs.  A URL like
     `http://site.com/article.cgi?25' will be saved as
     `article.cgi?25.html'.

     Note that filenames changed in this way will be re-downloaded
     every time you re-mirror a site, because Wget can't tell that the
     local `X.html' file corresponds to remote URL `X' (since it
     doesn't yet know that the URL produces output of type `text/html'.
     To prevent this re-downloading, you must use `-k' and `-K' so
     that the original version of the file will be saved as `X.orig'
     (*note Recursive Retrieval Options::).

`--http-user=USER'
`--http-passwd=PASSWORD'
     Specify the username USER and password PASSWORD on an HTTP server.
     According to the type of the challenge, Wget will encode them
     using either the `basic' (insecure) or the `digest' authentication
     scheme.

     Another way to specify username and password is in the URL itself
     (*note URL Format::).  For more information about security issues
     with Wget, *Note Security Considerations::.

`-C on/off'
`--cache=on/off'
     When set to off, disable server-side cache.  In this case, Wget
     will send the remote server an appropriate directive (`Pragma:
     no-cache') to get the file from the remote service, rather than
     returning the cached version.  This is especially useful for
     retrieving and flushing out-of-date documents on proxy servers.

     Caching is allowed by default.

`--cookies=on/off'
     When set to off, disable the use of cookies.  Cookies are a
     mechanism for maintaining server-side state.  The server sends the
     client a cookie using the `Set-Cookie' header, and the client
     responds with the same cookie upon further requests.  Since
     cookies allow the server owners to keep track of visitors and for
     sites to exchange this information, some consider them a breach of
     privacy.  The default is to use cookies; however, _storing_
     cookies is not on by default.

`--load-cookies FILE'
     Load cookies from FILE before the first HTTP retrieval.  The
     format of FILE is one used by Netscape and Mozilla, at least their
     Unix version.

     You will typically use this option when mirroring sites that
     require that you be logged in to access some or all of their
     content.  The login process typically works by the web server
     issuing an HTTP cookie upon receiving and verifying your
     credentials.  The cookie is then resent by the browser when
     accessing that part of the site, and so proves your identity.

     Mirroring such a site requires Wget to send the same cookies your
     browser sends when communicating with the site.  This is achieved
     by `--load-cookies'--simply point Wget to the location of the
     `cookies.txt' file, and it will send the same cookies your browser
     would send in the same situation.  If you're using Netscape
     navigator, specify `--load-cookies ~/.netscape/cookies.txt'.
     Mozilla keeps the cookies file somewhere under `~/.mozilla', in
     the profile directory, but it's also named `cookies.txt', the full
     path usually being
     `~/.mozilla/default/SOME-WEIRD-STRING/cookies.txt'.

     If you're using Wget under a non-Unix OS, or if you are using a
     different browser, `--load-cookies' will not work.

     In that case you can view the cookies using the cookie manager
     provided by your browser, and write down the name and value of the
     cookie needed for the site.  Then you can bypass the "official"
     cookie code and simply tell Wget to use that one cookie, like this:

          wget --cookies=off --header "Cookie: NAME=VALUE"

`--save-cookies FILE'
     Save cookies from FILE at the end of session.  Cookies whose
     expiry time is not specified, or those that have already expired,
     are not saved.

`--ignore-length'
     Unfortunately, some HTTP servers (CGI programs, to be more
     precise) send out bogus `Content-Length' headers, which makes Wget
     go wild, as it thinks not all the document was retrieved.  You can
     spot this syndrome if Wget retries getting the same document again
     and again, each time claiming that the (otherwise normal)
     connection has closed on the very same byte.

     With this option, Wget will ignore the `Content-Length' header--as
     if it never existed.

`--header=ADDITIONAL-HEADER'
     Define an ADDITIONAL-HEADER to be passed to the HTTP servers.
     Headers must contain a `:' preceded by one or more non-blank
     characters, and must not contain newlines.

     You may define more than one additional header by specifying
     `--header' more than once.

          wget --header='Accept-Charset: iso-8859-2' \
               --header='Accept-Language: hr'        \
                 http://fly.srk.fer.hr/

     Specification of an empty string as the header value will clear all
     previous user-defined headers.

`--proxy-user=USER'
`--proxy-passwd=PASSWORD'
     Specify the username USER and password PASSWORD for authentication
     on a proxy server.  Wget will encode them using the `basic'
     authentication scheme.

`--referer=URL'
     Include `Referer: URL' header in HTTP request.  Useful for
     retrieving documents with server-side processing that assume they
     are always being retrieved by interactive web browsers and only
     come out properly when Referer is set to one of the pages that
     point to them.

`-s'
`--save-headers'
     Save the headers sent by the HTTP server to the file, preceding the
     actual contents, with an empty line as the separator.

`-U AGENT-STRING'
`--user-agent=AGENT-STRING'
     Identify as AGENT-STRING to the HTTP server.

     The HTTP protocol allows the clients to identify themselves using a
     `User-Agent' header field.  This enables distinguishing the WWW
     software, usually for statistical purposes or for tracing of
     protocol violations.  Wget normally identifies as `Wget/VERSION',
     VERSION being the current version number of Wget.

     However, some sites have been known to impose the policy of
     tailoring the output according to the `User-Agent'-supplied
     information.  While conceptually this is not such a bad idea, it
     has been abused by servers denying information to clients other
     than `Mozilla' or Microsoft `Internet Explorer'.  This option
     allows you to change the `User-Agent' line issued by Wget.  Use of
     this option is discouraged, unless you really know what you are
     doing.


File: wget.info,  Node: FTP Options,  Next: Recursive Retrieval Options,  Prev: HTTP Options,  Up: Invoking

FTP Options
===========

`-nr'
`--dont-remove-listing'
     Don't remove the temporary `.listing' files generated by FTP
     retrievals.  Normally, these files contain the raw directory
     listings received from FTP servers.  Not removing them can be
     useful for debugging purposes, or when you want to be able to
     easily check on the contents of remote server directories (e.g. to
     verify that a mirror you're running is complete).

     Note that even though Wget writes to a known filename for this
     file, this is not a security hole in the scenario of a user making
     `.listing' a symbolic link to `/etc/passwd' or something and
     asking `root' to run Wget in his or her directory.  Depending on
     the options used, either Wget will refuse to write to `.listing',
     making the globbing/recursion/time-stamping operation fail, or the
     symbolic link will be deleted and replaced with the actual
     `.listing' file, or the listing will be written to a
     `.listing.NUMBER' file.

     Even though this situation isn't a problem, though, `root' should
     never run Wget in a non-trusted user's directory.  A user could do
     something as simple as linking `index.html' to `/etc/passwd' and
     asking `root' to run Wget with `-N' or `-r' so the file will be
     overwritten.

`-g on/off'
`--glob=on/off'
     Turn FTP globbing on or off.  Globbing means you may use the
     shell-like special characters ("wildcards"), like `*', `?', `['
     and `]' to retrieve more than one file from the same directory at
     once, like:

          wget ftp://gnjilux.srk.fer.hr/*.msg

     By default, globbing will be turned on if the URL contains a
     globbing character.  This option may be used to turn globbing on
     or off permanently.

     You may have to quote the URL to protect it from being expanded by
     your shell.  Globbing makes Wget look for a directory listing,
     which is system-specific.  This is why it currently works only
     with Unix FTP servers (and the ones emulating Unix `ls' output).

`--passive-ftp'
     Use the "passive" FTP retrieval scheme, in which the client
     initiates the data connection.  This is sometimes required for FTP
     to work behind firewalls.

`--retr-symlinks'
     Usually, when retrieving FTP directories recursively and a symbolic
     link is encountered, the linked-to file is not downloaded.
     Instead, a matching symbolic link is created on the local
     filesystem.  The pointed-to file will not be downloaded unless
     this recursive retrieval would have encountered it separately and
     downloaded it anyway.

     When `--retr-symlinks' is specified, however, symbolic links are
     traversed and the pointed-to files are retrieved.  At this time,
     this option does not cause Wget to traverse symlinks to
     directories and recurse through them, but in the future it should
     be enhanced to do this.

     Note that when retrieving a file (not a directory) because it was
     specified on the commandline, rather than because it was recursed
     to, this option has no effect.  Symbolic links are always
     traversed in this case.


File: wget.info,  Node: Recursive Retrieval Options,  Next: Recursive Accept/Reject Options,  Prev: FTP Options,  Up: Invoking

Recursive Retrieval Options
===========================

`-r'
`--recursive'
     Turn on recursive retrieving.  *Note Recursive Retrieval::, for
     more details.

`-l DEPTH'
`--level=DEPTH'
     Specify recursion maximum depth level DEPTH (*note Recursive
     Retrieval::).  The default maximum depth is 5.

`--delete-after'
     This option tells Wget to delete every single file it downloads,
     _after_ having done so.  It is useful for pre-fetching popular
     pages through a proxy, e.g.:

          wget -r -nd --delete-after http://whatever.com/~popular/page/

     The `-r' option is to retrieve recursively, and `-nd' to not
     create directories.

     Note that `--delete-after' deletes files on the local machine.  It
     does not issue the `DELE' command to remote FTP sites, for
     instance.  Also note that when `--delete-after' is specified,
     `--convert-links' is ignored, so `.orig' files are simply not
     created in the first place.

`-k'
`--convert-links'
     After the download is complete, convert the links in the document
     to make them suitable for local viewing.  This affects not only
     the visible hyperlinks, but any part of the document that links to
     external content, such as embedded images, links to style sheets,
     hyperlinks to non-HTML content, etc.

     Each link will be changed in one of the two ways:

        * The links to files that have been downloaded by Wget will be
          changed to refer to the file they point to as a relative link.

          Example: if the downloaded file `/foo/doc.html' links to
          `/bar/img.gif', also downloaded, then the link in `doc.html'
          will be modified to point to `../bar/img.gif'.  This kind of
          transformation works reliably for arbitrary combinations of
          directories.

        * The links to files that have not been downloaded by Wget will
          be changed to include host name and absolute path of the
          location they point to.

          Example: if the downloaded file `/foo/doc.html' links to
          `/bar/img.gif' (or to `../bar/img.gif'), then the link in
          `doc.html' will be modified to point to
          `http://HOSTNAME/bar/img.gif'.

     Because of this, local browsing works reliably: if a linked file
     was downloaded, the link will refer to its local name; if it was
     not downloaded, the link will refer to its full Internet address
     rather than presenting a broken link.  The fact that the former
     links are converted to relative links ensures that you can move
     the downloaded hierarchy to another directory.

     Note that only at the end of the download can Wget know which
     links have been downloaded.  Because of that, the work done by
     `-k' will be performed at the end of all the downloads.

`-K'
`--backup-converted'
     When converting a file, back up the original version with a `.orig'
     suffix.  Affects the behavior of `-N' (*note HTTP Time-Stamping
     Internals::).

`-m'
`--mirror'
     Turn on options suitable for mirroring.  This option turns on
     recursion and time-stamping, sets infinite recursion depth and
     keeps FTP directory listings.  It is currently equivalent to `-r
     -N -l inf -nr'.

`-p'
`--page-requisites'
     This option causes Wget to download all the files that are
     necessary to properly display a given HTML page.  This includes
     such things as inlined images, sounds, and referenced stylesheets.

     Ordinarily, when downloading a single HTML page, any requisite
     documents that may be needed to display it properly are not
     downloaded.  Using `-r' together with `-l' can help, but since
     Wget does not ordinarily distinguish between external and inlined
     documents, one is generally left with "leaf documents" that are
     missing their requisites.

     For instance, say document `1.html' contains an `<IMG>' tag
     referencing `1.gif' and an `<A>' tag pointing to external document
     `2.html'.  Say that `2.html' is similar but that its image is
     `2.gif' and it links to `3.html'.  Say this continues up to some
     arbitrarily high number.

     If one executes the command:

          wget -r -l 2 http://SITE/1.html

     then `1.html', `1.gif', `2.html', `2.gif', and `3.html' will be
     downloaded.  As you can see, `3.html' is without its requisite
     `3.gif' because Wget is simply counting the number of hops (up to
     2) away from `1.html' in order to determine where to stop the
     recursion.  However, with this command:

          wget -r -l 2 -p http://SITE/1.html

     all the above files _and_ `3.html''s requisite `3.gif' will be
     downloaded.  Similarly,

          wget -r -l 1 -p http://SITE/1.html

     will cause `1.html', `1.gif', `2.html', and `2.gif' to be
     downloaded.  One might think that:

          wget -r -l 0 -p http://SITE/1.html

     would download just `1.html' and `1.gif', but unfortunately this
     is not the case, because `-l 0' is equivalent to `-l inf'--that
     is, infinite recursion.  To download a single HTML page (or a
     handful of them, all specified on the commandline or in a `-i' URL
     input file) and its (or their) requisites, simply leave off `-r'
     and `-l':

          wget -p http://SITE/1.html

     Note that Wget will behave as if `-r' had been specified, but only
     that single page and its requisites will be downloaded.  Links
     from that page to external documents will not be followed.
     Actually, to download a single page and all its requisites (even
     if they exist on separate websites), and make sure the lot
     displays properly locally, this author likes to use a few options
     in addition to `-p':

          wget -E -H -k -K -p http://SITE/DOCUMENT

     To finish off this topic, it's worth knowing that Wget's idea of an
     external document link is any URL specified in an `<A>' tag, an
     `<AREA>' tag, or a `<LINK>' tag other than `<LINK
     REL="stylesheet">'.


File: wget.info,  Node: Recursive Accept/Reject Options,  Prev: Recursive Retrieval Options,  Up: Invoking

Recursive Accept/Reject Options
===============================

`-A ACCLIST --accept ACCLIST'
`-R REJLIST --reject REJLIST'
     Specify comma-separated lists of file name suffixes or patterns to
     accept or reject (*note Types of Files:: for more details).

`-D DOMAIN-LIST'
`--domains=DOMAIN-LIST'
     Set domains to be followed.  DOMAIN-LIST is a comma-separated list
     of domains.  Note that it does _not_ turn on `-H'.

`--exclude-domains DOMAIN-LIST'
     Specify the domains that are _not_ to be followed.  (*note
     Spanning Hosts::).

`--follow-ftp'
     Follow FTP links from HTML documents.  Without this option, Wget
     will ignore all the FTP links.

`--follow-tags=LIST'
     Wget has an internal table of HTML tag / attribute pairs that it
     considers when looking for linked documents during a recursive
     retrieval.  If a user wants only a subset of those tags to be
     considered, however, he or she should be specify such tags in a
     comma-separated LIST with this option.

`-G LIST'
`--ignore-tags=LIST'
     This is the opposite of the `--follow-tags' option.  To skip
     certain HTML tags when recursively looking for documents to
     download, specify them in a comma-separated LIST.

     In the past, the `-G' option was the best bet for downloading a
     single page and its requisites, using a commandline like:

          wget -Ga,area -H -k -K -r http://SITE/DOCUMENT

     However, the author of this option came across a page with tags
     like `<LINK REL="home" HREF="/">' and came to the realization that
     `-G' was not enough.  One can't just tell Wget to ignore `<LINK>',
     because then stylesheets will not be downloaded.  Now the best bet
     for downloading a single page and its requisites is the dedicated
     `--page-requisites' option.

`-H'
`--span-hosts'
     Enable spanning across hosts when doing recursive retrieving
     (*note Spanning Hosts::).

`-L'
`--relative'
     Follow relative links only.  Useful for retrieving a specific home
     page without any distractions, not even those from the same hosts
     (*note Relative Links::).

`-I LIST'
`--include-directories=LIST'
     Specify a comma-separated list of directories you wish to follow
     when downloading (*note Directory-Based Limits:: for more
     details.)  Elements of LIST may contain wildcards.

`-X LIST'
`--exclude-directories=LIST'
     Specify a comma-separated list of directories you wish to exclude
     from download (*note Directory-Based Limits:: for more details.)
     Elements of LIST may contain wildcards.

`-np'

`--no-parent'
     Do not ever ascend to the parent directory when retrieving
     recursively.  This is a useful option, since it guarantees that
     only the files _below_ a certain hierarchy will be downloaded.
     *Note Directory-Based Limits::, for more details.


File: wget.info,  Node: Recursive Retrieval,  Next: Following Links,  Prev: Invoking,  Up: Top

Recursive Retrieval
*******************

   GNU Wget is capable of traversing parts of the Web (or a single HTTP
or FTP server), following links and directory structure.  We refer to
this as to "recursive retrieving", or "recursion".

   With HTTP URLs, Wget retrieves and parses the HTML from the given
URL, documents, retrieving the files the HTML document was referring
to, through markups like `href', or `src'.  If the freshly downloaded
file is also of type `text/html', it will be parsed and followed
further.

   Recursive retrieval of HTTP and HTML content is "breadth-first".
This means that Wget first downloads the requested HTML document, then
the documents linked from that document, then the documents linked by
them, and so on.  In other words, Wget first downloads the documents at
depth 1, then those at depth 2, and so on until the specified maximum
depth.

   The maximum "depth" to which the retrieval may descend is specified
with the `-l' option.  The default maximum depth is five layers.

   When retrieving an FTP URL recursively, Wget will retrieve all the
data from the given directory tree (including the subdirectories up to
the specified depth) on the remote server, creating its mirror image
locally.  FTP retrieval is also limited by the `depth' parameter.
Unlike HTTP recursion, FTP recursion is performed depth-first.

   By default, Wget will create a local directory tree, corresponding to
the one found on the remote server.

   Recursive retrieving can find a number of applications, the most
important of which is mirroring.  It is also useful for WWW
presentations, and any other opportunities where slow network
connections should be bypassed by storing the files locally.

   You should be warned that recursive downloads can overload the remote
servers.  Because of that, many administrators frown upon them and may
ban access from your site if they detect very fast downloads of big
amounts of content.  When downloading from Internet servers, consider
using the `-w' option to introduce a delay between accesses to the
server.  The download will take a while longer, but the server
administrator will not be alarmed by your rudeness.

   Of course, recursive download may cause problems on your machine.  If
left to run unchecked, it can easily fill up the disk.  If downloading
from local network, it can also take bandwidth on the system, as well as
consume memory and CPU.

   Try to specify the criteria that match the kind of download you are
trying to achieve.  If you want to download only one page, use
`--page-requisites' without any additional recursion.  If you want to
download things under one directory, use `-np' to avoid downloading
things from other directories.  If you want to download all the files
from one directory, use `-l 1' to make sure the recursion depth never
exceeds one.  *Note Following Links::, for more information about this.

   Recursive retrieval should be used with care.  Don't say you were not
warned.


File: wget.info,  Node: Following Links,  Next: Time-Stamping,  Prev: Recursive Retrieval,  Up: Top

Following Links
***************

   When retrieving recursively, one does not wish to retrieve loads of
unnecessary data.  Most of the time the users bear in mind exactly what
they want to download, and want Wget to follow only specific links.

   For example, if you wish to download the music archive from
`fly.srk.fer.hr', you will not want to download all the home pages that
happen to be referenced by an obscure part of the archive.

   Wget possesses several mechanisms that allows you to fine-tune which
links it will follow.

* Menu:

* Spanning Hosts::         (Un)limiting retrieval based on host name.
* Types of Files::         Getting only certain files.
* Directory-Based Limits:: Getting only certain directories.
* Relative Links::         Follow relative links only.
* FTP Links::              Following FTP links.

